/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myUtil;

import concurrentbst.ConcurrentBST;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import test.Test;

/**
 *
 * @author Lorenzo
 */
public class WizardTest extends javax.swing.JFrame {

    String textInsert;
    String textDelete;
    String textFind;
    //ConcurrentBST tree;
    List<Operation> tasks;

    /**
     * Creates new form WizardTest
     */
    public WizardTest(ConcurrentBST tree) {
        //this.tree = tree;
        this.tasks = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TFInsert = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TFDelete = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TFFind = new javax.swing.JTextField();
        btn_check = new javax.swing.JButton();
        btn_go = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        spinner_threads = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jpbar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TFInsert.setText("1,2,3,4,5,6,7,8,9,10-20,1-20");
        TFInsert.setToolTipText("example: 1,2,2,2-5,6,7-15,16,17");
        TFInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFInsertActionPerformed(evt);
            }
        });

        jLabel2.setText("Keys associated to INSERTS (Integer separated by commas)");

        jLabel4.setText("Keys associated to DELETE (Integer separated by commas)");

        TFDelete.setText("1-20");
        TFDelete.setToolTipText("example: 1,2,2,2-5,6,7-15,16,17");
        TFDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFDeleteActionPerformed(evt);
            }
        });

        jLabel6.setText("Keys associated to FIND (Integer separated by commas)");

        TFFind.setText("1-20");
        TFFind.setToolTipText("example: 1,2,2,2-5,6,7-15,16,17");
        TFFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFFindActionPerformed(evt);
            }
        });

        btn_check.setText("Check Input");
        btn_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_checkActionPerformed(evt);
            }
        });

        btn_go.setText("GO");
        btn_go.setEnabled(false);
        btn_go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_goActionPerformed(evt);
            }
        });

        btn_edit.setText("edit again");
        btn_edit.setEnabled(false);
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        spinner_threads.setValue(20);

        jLabel1.setText("Number of working threads");

        jpbar.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1)
                        .addGap(137, 137, 137))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(TFFind, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(TFDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(TFInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn_check)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_edit))
                                    .addComponent(spinner_threads, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_go))
                            .addComponent(jpbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TFInsert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TFDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TFFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spinner_threads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_check)
                    .addComponent(btn_edit)
                    .addComponent(btn_go))
                .addGap(18, 18, 18)
                .addComponent(jpbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TFInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFInsertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFInsertActionPerformed

    private void TFDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFDeleteActionPerformed

    private void TFFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFFindActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TFFindActionPerformed

    private void btn_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_checkActionPerformed
        // TODO add your handling code here:

        textInsert = TFInsert.getText();
        textDelete = TFDelete.getText();
        textFind = TFFind.getText();

        if (!checkTextValid(textInsert)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Insert operations are not written in an acceptable format");
            return;
        }
        if (!checkTextValid(textDelete)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Delete operations are not written in an acceptable format");
            return;
        }
        if (!checkTextValid(textFind)) {
            JOptionPane.showMessageDialog(rootPane,
                    "Find operations are not written in an acceptable format");
            return;
        }

        JOptionPane.showMessageDialog(rootPane, "Input is fine, you can go!");
        TFInsert.setEnabled(false);
        TFDelete.setEnabled(false);
        TFFind.setEnabled(false);

        spinner_threads.setEnabled(false);
        btn_check.setEnabled(false);
        btn_edit.setEnabled(true);
        btn_go.setEnabled(true);


    }//GEN-LAST:event_btn_checkActionPerformed

    private void btn_goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_goActionPerformed

        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {

            protected Void doInBackground() throws Exception {
                jpbar.setEnabled(true);
                jpbar.setIndeterminate(true);
                ConcurrentBST<Integer, Object> tree = new ConcurrentBST<>();
                List<Operation> opInserts = parseInput(textInsert, OperationType.INSERT, tree);
                List<Operation> opDeletes = parseInput(textDelete, OperationType.DELETE, tree);
                List<Operation> opFinds = parseInput(textFind, OperationType.FIND, tree);

                tasks.addAll(opInserts);
                tasks.addAll(opDeletes);
                tasks.addAll(opFinds);
                try {
                    // TODO add your handling code here:
                    Integer numbThreads = (Integer) spinner_threads.getValue();
                    Test.startConcurrentTest(tree, tasks, numbThreads);
                } catch (InterruptedException | ExecutionException ex) {
                    System.out.println("Some error in executing parallel tasks");
                    Logger.getLogger(WizardTest.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    System.out.println("Some error in writing to log");
                    Logger.getLogger(WizardTest.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    System.out.println("Some error in writing to log");
                    Logger.getLogger(WizardTest.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    System.out.println("Some error in writing to log");
                    Logger.getLogger(WizardTest.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    Test.printTree(tree, "afterTest");
                } catch (InterruptedException ex) {
                    System.out.println("Some error in rendering the tree");
                    Logger.getLogger(WizardTest.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }

            @Override
            protected void done() {
                jpbar.setIndeterminate(false);
                jpbar.setEnabled(false);
            }
        };
        sw.execute();
    }//GEN-LAST:event_btn_goActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        // TODO add your handling code here:
        TFInsert.setEnabled(true);
        TFDelete.setEnabled(true);
        TFFind.setEnabled(true);

        spinner_threads.setEnabled(true);
        btn_check.setEnabled(true);
        btn_edit.setEnabled(false);
        btn_go.setEnabled(false);
    }//GEN-LAST:event_btn_editActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TFDelete;
    private javax.swing.JTextField TFFind;
    private javax.swing.JTextField TFInsert;
    private javax.swing.JButton btn_check;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JProgressBar jpbar;
    private javax.swing.JSpinner spinner_threads;
    // End of variables declaration//GEN-END:variables

    private boolean checkTextValid(String input_keys) {
        boolean retval = true;
        String[] toParse = input_keys.split(",");
        ArrayList<String> strings = new ArrayList<>(Arrays.asList(toParse));
        for (String s : strings) {
            String[] split = s.split("-");
            if (split.length > 2) {
                return false;
            }

            ArrayList<String> splits = new ArrayList<>(Arrays.asList(split));
            for (String sp : splits) {
                sp = sp.trim();
                try {
                    Integer.parseInt(sp);
                } catch (NumberFormatException e) {
                    return false;
                }
                retval = retval && isInteger(sp);
            }
            if ((split.length > 1) && (Integer.parseInt(split[0].trim()) >= Integer.parseInt(split[1].trim()))) {
                return false;
            }
        }
        return retval;
    }

    private boolean isInteger(String input) {
        try {
            Integer.parseInt(input);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private List<Operation> parseInput(String input_keys, OperationType optype, ConcurrentBST<Integer, Object> tree) {
        ArrayList<Operation> retval = new ArrayList<>();
        String[] toParse = input_keys.split(",");
        ArrayList<String> strings = new ArrayList<>(Arrays.asList(toParse));
        for (String s : strings) {
            s = s.trim();
            if (isInteger(s)) {
                retval.add(new Operation(tree, optype, Integer.parseInt(s)));
            } else {
                String[] split = s.split("-", 2);
                if (split.length != 2) {
                    return null;
                }
                String start = split[0].trim();
                String end = split[1].trim();
                if (isInteger(start) && isInteger(end)) {
                    for (int i = Integer.parseInt(start); i <= Integer.parseInt(end); i++) {
                        retval.add(new Operation(tree, optype, i));
                    }
                } else {
                    return null;
                }
            }
        }
        return retval;
    }

    public JProgressBar getJpbar() {
        return jpbar;
    }

}
